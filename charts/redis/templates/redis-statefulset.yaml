apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "redis.fullname" . }}
spec:
  selector:
    matchLabels:
      app: {{ include "redis.fullname" . }}-sts
  serviceName: {{ .Values.service.name }}
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      labels:
        app: {{ include "redis.fullname" . }}-sts
    spec:
      terminationGracePeriodSeconds: 10
      initContainers:
        - name: init-redis
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          command:
            - bash
            - "-c"
            - |
              set -ex
              # Generate server-id from Pod ordinal index.
              [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
              ordinal=${BASH_REMATCH[1]}
              echo "ordinal ${ordinal}"
              # Copy appropriate config files from config-map to emptyDir.
              mkdir -p /redis/conf/
              if [[ $ordinal -eq 0 ]]; then
                cp /mnt/redis-configmap/primary.conf /redis/conf/redis.conf
              else
                cp /mnt/redis-configmap/replica.conf /redis/conf/redis.conf
              fi
              cat /redis/conf/redis.conf
          volumeMounts:
            - name: redis-config-volume
              mountPath: /redis/conf/
            - name: redis-configmap-volume
              mountPath: /mnt/redis-configmap
      containers:
        - name: redis-container
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["redis-server"]
          args: ["/redis/conf/redis.conf"]
          volumeMounts:
            - name: redis-config-volume
              mountPath: /redis/conf/
            - name: redis-pvc
              mountPath: /redis/data
          resources:
            requests:
              cpu: {{ .Values.resources.requests.cpu }}
              memory: {{ .Values.resources.requests.memory }}
            limits:
              cpu: {{ .Values.resources.limits.cpu }}
              memory: {{ .Values.resources.limits.memory }}
          livenessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          readinessProbe:
            exec:
              command:
                - bash
                - -c
                - |
                  role=$(redis-cli -h 127.0.0.1 info replication | grep "role:" | tr -d '\r' | cut -d':' -f2)
                  if [[ "$role" == "master" ]]; then
                    exit 0
                  else
                    master_status=$(redis-cli -h 127.0.0.1 info replication | grep "master_link_status:" | tr -d '\r')
                    [[ "$master_status" == "master_link_status:up"* ]] || exit 1
                  fi
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
      volumes:
        - name: redis-configmap-volume
          configMap:
            name: {{ include "redis.fullname" . }}-config
        - name: redis-config-volume
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-pvc
      spec:
        accessModes:
{{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
{{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
